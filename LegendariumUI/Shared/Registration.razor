@using LegendariumUI.Models.Authentication

@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject IToastService ToastService

<h3>Registration</h3>
<EditForm Model="@player" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator />
    <div class="from-group">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="player.Email" class="form-control" />
        <ValidationMessage For="@(() => player.Email)" />
    </div>
    <div class="from-group">
        <label for="username">Username</label>
        <InputText id="username" @bind-Value="player.Username" class="form-control" />
        <ValidationMessage For="@(() => player.Username)" />
    </div>
    <div class="from-group">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="player.Password" class="form-control" type="password" />
        <ValidationMessage For="@(() => player.Password)" />
    </div>
    <div class="from-group">
        <label for="confirmPassword">Confirm Password</label>
        <InputText id="confirmPassword" @bind-Value="player.ConfirmPassword" class="form-control" type="password" />
        <ValidationMessage For="@(() => player.ConfirmPassword)" />
    </div>
    <div class="from-group">
        <label for="BirthDay">Date of Birth</label>
        <InputDate id="birthday" @bind-Value="player.BirthDay" class="form-control" />
    </div>
    <div class="from-check">
        <InputCheckbox id="dateOfBirth" @bind-Value="player.IsConfirmed" class="form-check-input" />
        <label for="confirmed">Confirmed</label>
        <ValidationMessage For="@(() => player.IsConfirmed)" />
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>


@code {
    private PlayerRegister player = new PlayerRegister();

    async void HandleRegistration()
    {
        var result = await AuthService.Register(player);

        if (result.Success)
        {
            ToastService.ShowSuccess(result.Message);
            
        }
        else
        {
            ToastService.ShowError(result.Message);
        }

    }

    protected override async Task OnInitializedAsync()
    {
        //await UnitService.LoadUnitsAsync();
    }
}
