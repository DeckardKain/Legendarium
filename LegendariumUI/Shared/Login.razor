@inject ILocalStorageService StorageService
@inject IAuthService AuthService
@inject IToastService ToastService
@inject IUtilityService UtilityService
@inject NavigationManager NavManager

<h3>Login</h3>


Please log in below or <a href="register">register</a> for a new account.

<EditForm Model="@user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="from-group">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control" />
        <ValidationMessage For="@(() => user.Email)" />
    </div>
    <div class="from-group">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
        <ValidationMessage For="@(() => user.Password)" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
    @*<ValidationSummary />*@
</EditForm>


@code {
    [Parameter]
    public EventCallback<int> SetPlayerId { get; set; }

    [Parameter]
    public EventCallback<bool> ShowMainPage { get; set; }

    private PlayerLogin user = new PlayerLogin();


    private async Task HandleLogin()
    {
        var result = await AuthService.Login(user);

        if (result.Success)
        {
            await StorageService.SetItemAsync<string>("authToken", result.Data);
            //var playerId = await UtilityService.GetPlayerId();
            //await SetPlayerId.InvokeAsync(playerId);
            ToastService.ShowSuccess(result.Message);
            
            await ShowMainPage.InvokeAsync(true);
            StateHasChanged();

        }
        else
        {
            ToastService.ShowError(result.Message);
        }
    }

}
